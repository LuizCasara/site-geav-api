AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for GEAV Site API'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment (dev or prod)

  DBUsername:
    Type: String
    NoEcho: true
    Description: Username for PostgreSQL database

  DBPassword:
    Type: String
    NoEcho: true
    Description: Password for PostgreSQL database

  DBName:
    Type: String
    Default: geav
    Description: Name of the PostgreSQL database

  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: RDS instance class

  LambdaMemorySize:
    Type: Number
    Default: 128
    Description: Memory size for Lambda functions in MB

  LambdaTimeout:
    Type: Number
    Default: 30
    Description: Timeout for Lambda functions in seconds

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    DeletionPolicy: Retain
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DeletionPolicy: Retain
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DeletionPolicy: Retain
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Retain
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Retain
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DeletionPolicy: Retain
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    DeletionPolicy: Retain
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-rt-1

  PrivateRoute1:
    Type: AWS::EC2::Route
    DeletionPolicy: Retain
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Retain
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Retain
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable1

  # Security Groups
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Retain
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Retain
    Properties:
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  # RDS PostgreSQL
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DeletionPolicy: Retain
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS PostgreSQL
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  PostgreSQLDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBName: !Ref DBName
      Engine: postgres
      EngineVersion: 13.7
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: 20
      StorageType: gp2
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      MultiAZ: false
      PubliclyAccessible: false
      BackupRetentionPeriod: 7
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-postgres

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  # Lambda Functions
  UsersFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Sub ${AWS::StackName}-users-${Environment}
      Handler: users
      Runtime: go1.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${AWS::StackName}-lambda-code-${AWS::AccountId}
        S3Key: users.zip
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          DB_HOST: !GetAtt PostgreSQLDB.Endpoint.Address
          DB_PORT: !GetAtt PostgreSQLDB.Endpoint.Port
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_NAME: !Ref DBName
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  LugaresFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Sub ${AWS::StackName}-lugares-${Environment}
      Handler: lugares
      Runtime: go1.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${AWS::StackName}-lambda-code-${AWS::AccountId}
        S3Key: lugares.zip
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          DB_HOST: !GetAtt PostgreSQLDB.Endpoint.Address
          DB_PORT: !GetAtt PostgreSQLDB.Endpoint.Port
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_NAME: !Ref DBName
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  CancoesFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Sub ${AWS::StackName}-cancoes-${Environment}
      Handler: cancoes
      Runtime: go1.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${AWS::StackName}-lambda-code-${AWS::AccountId}
        S3Key: cancoes.zip
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          DB_HOST: !GetAtt PostgreSQLDB.Endpoint.Address
          DB_PORT: !GetAtt PostgreSQLDB.Endpoint.Port
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_NAME: !Ref DBName
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    DeletionPolicy: Retain
    Properties:
      Name: !Sub ${AWS::StackName}-api-${Environment}
      Description: API for GEAV Site
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Users API Resources
  UsersResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: users
    UpdateReplacePolicy: Delete

  UserResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UsersResource
      PathPart: '{id}'

  # Users API Methods
  UsersGetMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UsersResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations

  UsersPostMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UsersResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations

  UserGetMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations

  UserPutMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations

  UserDeleteMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations

  # Lugares API Resources
  LugaresResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: lugares

  LugarResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref LugaresResource
      PathPart: '{id}'

  # Lugares API Methods
  LugaresGetMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LugaresResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LugaresFunction.Arn}/invocations

  LugaresPostMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LugaresResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LugaresFunction.Arn}/invocations

  LugarGetMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LugarResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LugaresFunction.Arn}/invocations

  LugarPutMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LugarResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LugaresFunction.Arn}/invocations

  LugarDeleteMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LugarResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LugaresFunction.Arn}/invocations

  # Cancoes API Resources
  CancoesResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: cancoes

  CancaoResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref CancoesResource
      PathPart: '{id}'

  # Cancoes API Methods
  CancoesGetMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref CancoesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CancoesFunction.Arn}/invocations

  CancoesPostMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref CancoesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CancoesFunction.Arn}/invocations

  CancaoGetMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref CancaoResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CancoesFunction.Arn}/invocations

  CancaoPutMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref CancaoResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CancoesFunction.Arn}/invocations

  CancaoDeleteMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref CancaoResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CancoesFunction.Arn}/invocations

  # Lambda Permissions
  UsersLambdaPermission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Retain
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UsersFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*

  LugaresLambdaPermission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Retain
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LugaresFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*

  CancoesLambdaPermission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Retain
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CancoesFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*

  # API Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DeletionPolicy: Retain
    DependsOn:
      - UsersGetMethod
      - UsersPostMethod
      - UserGetMethod
      - UserPutMethod
      - UserDeleteMethod
      - LugaresGetMethod
      - LugaresPostMethod
      - LugarGetMethod
      - LugarPutMethod
      - LugarDeleteMethod
      - CancoesGetMethod
      - CancoesPostMethod
      - CancaoGetMethod
      - CancaoPutMethod
      - CancaoDeleteMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

# Outputs section commented out for import operation
# Outputs:
#   ApiEndpoint:
#     Description: API Gateway endpoint URL
#     Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
# 
#   DatabaseEndpoint:
#     Description: PostgreSQL database endpoint
#     Value: !GetAtt PostgreSQLDB.Endpoint.Address
# 
#   DatabasePort:
#     Description: PostgreSQL database port
#     Value: !GetAtt PostgreSQLDB.Endpoint.Port
